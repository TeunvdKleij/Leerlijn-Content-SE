name: Compile and Sync Content

on:
  push:
    branches:
      - content

permissions:
  contents: write
  pull-requests: write

jobs:
  process-and-sync:
    runs-on: ubuntu-latest
    steps:
      # Step 1: Configure Git
      - name: Configure Git
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"

      # Step 2: Checkout code
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 3: Set up Python
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.x"

      # Step 4: Install dependencies
      - name: Install dependencies
        run: |
          pip install pandas openpyxl

      # Step 5: Run the Python script
      - name: Run compile_content.py
        run: |
          python .github/script/compile_content.py --dataset .github/datasets/dataset.xlsx

      - name: Copy report.md to root
        run: |
          cp report.md ../

      # Step 6: Move build folder to root
      - name: Move build folder to root
        run: |
          mkdir -p ../build && cp -r build/* ../build/ && rm -rf build

      # Step 7: Commit report.md to content branch
      - name: Commit report.md to content branch
        run: |
          git add report.md
          if ! git diff-index --quiet HEAD; then
            git commit -m "Update report.md"
            git push origin content
          else
            echo "No changes to commit"
          fi

      # Step 8: Sync to staging branch
      - name: Switch to staging branch and sync
        run: |
          git fetch origin
          git checkout staging
          git rm -rf build/ || true
          cp -r ../build/ build
          git add build/
          cp ../report.md report.md
          git add report.md
          git commit -m "Sync compiled files and report.md to staging" || echo "No changes to commit"
          git push origin staging

      # Step 9: Check for differences between main and staging
      - name: Check if changes exist between staging and main
        run: |
          git fetch origin
          if ! git diff --quiet origin/main..HEAD; then
            echo "Changes found. Proceeding with PR creation."
          else
            echo "No changes to create PR for."
            exit 0
          fi

      # Step 9: Create Pull Request to main
      - name: Create PR branch
        run: |
          git checkout -b update-from-staging
          git push origin update-from-staging

      - name: Debug branch creation
        run: git branch -a

      - name: Check changes in branch
        run: git diff origin/main..update-from-staging

      - name: Create Pull Request to main
        uses: peter-evans/create-pull-request@v7.0.5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          branch: "update-from-staging"
          commit-message: "Update compiled markdown files and report"
          title: "Update main with changes from staging"
          body: "This PR includes updates from the staging branch."
          base: "main"
          labels: |
            automated-pr
            content-update
