name: Run the wikiversie parser and create PR
on:
  push:
    branches:
      - staging
    paths-ignore:
      - ".github/**"
      - "test_cases/**"

permissions:
  contents: write
  pull-requests: write

jobs:
  run-parser-and-create-pr:
    runs-on: ubuntu-latest
    steps:
      - name: Configure Git
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"

      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: "3.x"

      - name: Install dependencies
        run: |
          pip install pandas
          pip install openpyxl

      - name: Fetch all branches
        run: |
          git fetch --all

      - name: Checkout staging branch
        run: |
          git checkout staging

      - name: Run wikiversie_parser.py script
        run: |
          python .github/wikiversie_parser.py --src "./content" --dest "./build" --dataset .github/dataset.xlsx --verbose

      - name: Get list of files in temp directory
        run: |
          # Get list of files in staging without '../temp_build_files/' prefix
          find build -type f | sed 's|^\./||' | LC_ALL=C sort | iconv -f UTF-8 -t UTF-8//IGNORE > staging_files.txt
          echo "Files in staging:"
          cat staging_files.txt

      - name: Create temporary directory for new files
        run: |
          mkdir ../temp_build_files/
          mkdir ../temp_build_files/build/

      - name: Copy new build files to temporary directory
        run: |
          cp ./report.md ../temp_build_files/  # Copy report.md to a temporary directory for backup
          cp ./staging_files.txt ../temp_build_files/  # Copy staging_files.txt to a temporary directory for backup
          cp -r ./build/* ../temp_build_files/build/  # Copy new files to a temporary directory for backup

      - name: Stash untracked changes
        run: |
          git stash --include-untracked

      - name: Checkout main branch
        run: |
          git checkout main
          git pull origin main

      - name: Get list of files from main
        run: |
          git ls-tree -r --name-only main | grep '^build/' | LC_ALL=C sort | iconv -f UTF-8 -t UTF-8//IGNORE | sed 's/\\303\\253/Ã«/g' > main_files.txt
          echo "Files in main directory:"
          cat main_files.txt

      - name: Determine files to delete from main
        run: |
          # Check if the files exist
          ls -l ../temp_build_files/staging_files.txt main_files.txt

          # Use awk to find lines in main_files.txt that are not in staging_files.txt
          awk 'NR==FNR {seen[$0]=1; next} !seen[$0]' ../temp_build_files/staging_files.txt main_files.txt > files_to_delete.txt

          # Output the files to delete
          echo "Files to delete:"
          cat files_to_delete.txt

      - name: Delete obsolete files in main
        run: |
          if [ -s files_to_delete.txt ]; then
            cat files_to_delete.txt | xargs -d '\n' -I {} git rm -f "{}"
          else
            echo "No obsolete files to delete"
          fi

      - name: Copy new build files from temporary directory to main
        run: |
          cp -r ../temp_build_files/build/* ./build/  # Copy new files back to the main directory
          cp ../temp_build_files/report.md ./ # Copy the new report

      - name: Create Pull Request to main
        uses: peter-evans/create-pull-request@v6
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: Update wikiversie with changes from Content
          title: "Update main with changes from Content"
          body: "This PR includes updates from the content branch."
          branch: "main-content-update"
          base: "main"
          labels: |
            automated-pr
